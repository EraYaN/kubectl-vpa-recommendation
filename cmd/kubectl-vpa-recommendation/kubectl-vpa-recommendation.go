package main

import (
	_ "embed"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/spf13/pflag"
	"k8s.io/cli-runtime/pkg/genericclioptions"
	kcli "k8s.io/component-base/cli"
	"k8s.io/component-base/logs"

	// Initialize client auth plugins.
	_ "k8s.io/client-go/plugin/pkg/client/auth"

	"github.com/wI2L/kubectl-vpa-recommendation/cli"
)

const pluginName = "kubectl-vpa-recommendation"

func main() {
	cmdName := pluginName

	// If the command is executed as a `kubectl` plugin,
	// use a nicer format for the root command name in
	// help outputs generated by cobra.
	if strings.HasPrefix(filepath.Base(os.Args[0]), "kubectl-") {
		cmdName = strings.ReplaceAll(cmdName, "-", " ")
	}
	streams := genericclioptions.IOStreams{
		In:     os.Stdin,
		Out:    os.Stdout,
		ErrOut: os.Stderr,
	}
	cmd := cli.NewCmd(streams, cmdName)

	// Add hidden logging flags.
	// This prevents a "messy" help message.
	logs.AddFlags(cmd.PersistentFlags())
	normalizeFlags(cmd.PersistentFlags())

	code := kcli.Run(cmd)
	os.Exit(code)
}

func normalizeFlags(flags *pflag.FlagSet) {
	// Logs are written to standard error instead of to files.
	_ = flags.Set("logtostderr", "true")

	// Hide logging related flags to have a nicer usage.
	// https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components
	_ = flags.MarkHidden("add_dir_header")
	_ = flags.MarkHidden("alsologtostderr")
	_ = flags.MarkHidden("log_backtrace_at")
	_ = flags.MarkHidden("log_dir")
	_ = flags.MarkHidden("log_file")
	_ = flags.MarkHidden("log_file_max_size")
	_ = flags.MarkHidden("log-flush-frequency")
	_ = flags.MarkHidden("logtostderr")
	_ = flags.MarkHidden("one_output")
	_ = flags.MarkHidden("skip_headers")
	_ = flags.MarkHidden("skip_log_headers")
	_ = flags.MarkHidden("stderrthreshold")

	if f := flags.Lookup("v"); f != nil {
		f.Usage = capitalizeSentence(f.Usage)
	}
	if f := flags.Lookup("vmodule"); f != nil {
		f.Usage = capitalizeSentence(f.Usage)
	}
}

func capitalizeSentence(s string) string {
	a := []rune(s)
	a[0] = unicode.ToUpper(a[0])
	return string(a)
}
